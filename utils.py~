import os
from static import *
import sqlite3

def a_bit_of_ipsum():
  import loremipsum
  from random import choice
  def sentence():
    return loremipsum.generate_sentence()[2]
  def word():
    return choice(loremipsum.generate_sentence()[2].split(' '))
  
  return [sentence,word]

def get_or_none(data,index):
  try:
    return data[index]
  except: 
    return None

def to_clip(data):
  """ TODO: figure out
      middle button copy paste 
  """
  pyperclip.copy(str(data))
  
def from_clip():
  """
    Have to install xclip
  """
  return pyperclip.paste()


def split_list(array,keyword):
  """ split array by keyword
      keyword is not returned 

  """
  try:
    index = array.index(keyword)
    return [array[:index],array[index+1:]]
  except ValueError:
    return [array,[]]


def weak_get(data,index):
  try:
    return data[index]
  except IndexError:
    return None


def weak_pop(array):
  try:
    return array.pop()
  except IndexError:
    return None

def weak_to_int(string):
  try:
    return int(string)
  except ValueError:
    return None



import re
__sp_split_pattern = re.compile("\s+") # have to do because of state. 
1def sp_split(data):
  return  __sp_split_pattern.split(data)


__filter_numbers_pattern = re.compile('[0-9]+')
def filter_numbers(array):
  return [weak_to_int(i) for i in \
          filter(lambda x: __filter_numbers_pattern.match(str(x)),array)]
  



def list_dir(path,mode=0):
  """ list only directories
      mode == 0 # only folders
      mode == 1 # only files
      mode == 2 # both 
  """
  if mode == 0:
    def comparator(i):
      return os.path.isdir(os.path.join(path,i))
  elif mode == 1:
    def comparator(i):
      return not os.path.isdir(os.path.join(path,i))
  else:
    def comparator(i):
      return True
  for i in os.listdir(path):
    if comparator(i):
      yield i


def tags_to_list(tags):
  if tags == None:
    return []
  if type(tags) == list:
    return sorted(list(set(tags)))
  else:
    return sorted(list(set(tags.split(TAG_SPLITTER))))

def tags_to_string(tags):
  if tags == None:
    return ''
  if type(tags) == str:
    return ' '.join(sorted(list(set(tags.split(TAG_SPLITTER)))))    
  else:
    return ' '.join(sorted(list(set(tags))))
  
def everything_to_str(smth):
  if type(smth) == str:
    return smth
  return  ' '.join(smth)

def everything_to_list(smth):
  if type(smth) == str:
    return sp_split(smth)
  return list(smth)







